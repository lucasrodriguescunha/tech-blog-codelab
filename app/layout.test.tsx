import {render, screen} from '@testing-library/react';
import RootLayout, {metadata} from './layout';
import {Roboto} from 'next/font/google';

// Mock Next.js font imports
jest.mock('next/font/google', () => ({
    Roboto: jest.fn().mockImplementation(() => ({
        variable: '--font-geist-roboto',
        style: {fontFamily: 'Roboto'},
        subsets: ['latin'],
    })),
}));

// Mock CSS imports
jest.mock('./globals.css', () => ({}));

const mockRoboto = Roboto as jest.MockedFunction<typeof Roboto>;

describe('RootLayout', () => {
    it('renderiza o componente RootLayout com filhos', () => {
        const mockChildren = <div data-testid='mock-children'>Mock Children Content</div>;

        // Renderiza apenas o conteúdo interno do RootLayout para evitar erros de hidratação
        const LayoutContent = () => {
            const layout = RootLayout({children: mockChildren});
            // Extrai apenas o conteúdo do body para teste
            return layout.props.children.props.children;
        };

        render(<LayoutContent/>);

        // Verifica se o conteúdo dos filhos está sendo renderizado
        expect(screen.getByTestId('mock-children')).toBeInTheDocument();
        expect(screen.getByText('Mock Children Content')).toBeInTheDocument();
    });

    it('retorna a estrutura HTML correta', () => {
        const mockChildren = <div>Test Content</div>;

        const result = RootLayout({children: mockChildren});

        // Verifica se retorna um elemento html com as propriedades corretas
        expect(result.type).toBe('html');
        expect(result.props.lang).toBe('pt-br');

        // Verifica se contém um elemento body
        const bodyElement = result.props.children;
        expect(bodyElement.type).toBe('body');
        expect(bodyElement.props.className).toContain('--font-geist-roboto');
        expect(bodyElement.props.className).toContain('antialiased');

        // Verifica se os children estão sendo passados corretamente
        expect(bodyElement.props.children).toBe(mockChildren);
    });

    it('aplica a configuração de fonte corretamente', () => {
        // Testa se o mock da fonte Roboto está sendo chamado corretamente
        expect(mockRoboto).toHaveBeenCalledWith({
            variable: '--font-geist-roboto',
            subsets: ['latin'],
        });
    });

    it('possui metadados corretos', () => {
        expect(metadata.title).toBe('CodeLab | Tech Blog');
        expect(metadata.description).toBe('Generated by create next app');
    });
});